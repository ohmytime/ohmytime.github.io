[{"categories":["wolf"],"content":"TRX (Transceiver) 是收发机的核心部分。从代码中可以看到TRX相关的菜单设置： graph LR A[TRX主结构] --\u003e B[VFO设置] A --\u003e C[频率控制] A --\u003e D[音频处理] A --\u003e E[滤波器] A --\u003e F[校准数据] A --\u003e G[WiFi设置] B --\u003e B1[VFO_A] B --\u003e B2[VFO_B] B1 --\u003e B11[频率Freq] B1 --\u003e B12[模式Mode] B1 --\u003e B13[滤波器Filter] C --\u003e C1[频率步进STEP] C --\u003e C2[RIT/XIT] C --\u003e C3[波段设置] D --\u003e D1[音量Volume] D --\u003e D2[均衡器EQ] D --\u003e D3[AGC控制] E --\u003e E1[低通LPF] E --\u003e E2[高通HPF] E --\u003e E3[带通BPF] F --\u003e F1[SWR校准] F --\u003e F2[功率校准] F --\u003e F3[S表校准] graph LR A[TRX主结构] --\u003e B[VFO设置] A --\u003e C[频率控制] A --\u003e D[音频处理] A --\u003e E[滤波器] A --\u003e F[校准数据] A --\u003e G[WiFi设置] B --\u003e B1[VFO_A] B --\u003e B2[VFO_B] B1 --\u003e B11[频率Freq] B1 --\u003e B12[模式Mode] B1 --\u003e B13[滤波器Filter] C --\u003e C1[频率步进STEP] C --\u003e C2[RIT/XIT] C --\u003e C3[波段设置] D --\u003e D1[音量Volume] D --\u003e D2[均衡器EQ] D --\u003e D3[AGC控制] E --\u003e E1[低通LPF] E --\u003e E2[高通HPF] E --\u003e E3[带通BPF] F --\u003e F1[SWR校准] F --\u003e F2[功率校准] F --\u003e F3[S表校准] ","date":"2025-01-25","objectID":"/posts/trx%E6%94%B6%E5%8F%91%E5%99%A8%E7%BB%93%E6%9E%84/:0:0","tags":["wolf"],"title":"TRX收发器结构","uri":"/posts/trx%E6%94%B6%E5%8F%91%E5%99%A8%E7%BB%93%E6%9E%84/"},{"categories":["wolf"],"content":"测试一下 看看效果 ","date":"2025-01-25","objectID":"/posts/%E7%8B%BC%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/:0:0","tags":["wolf"],"title":"狼代码阅读","uri":"/posts/%E7%8B%BC%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/"},{"categories":["开发"],"content":"立创开源平台 源代码 ","date":"2025-01-23","objectID":"/posts/si4735/:0:0","tags":["esp32"],"title":"4735","uri":"/posts/si4735/"},{"categories":["开发"],"content":"RT, 使用魔法也不行， 那就手动下载，然后把下载的东西逐个放进如下地址，再安装就可以了。 Mac 包地址 /Users/[你的用户名]/Library/Arduino15/staging/packages Windows 包地址 /Users/[你的用户名]/Library/Arduino15/staging/packages 这样的话，你也可以一次性把所需的文件下载好，做成离线包。 如此 → 然后 F**king … ","date":"2025-01-23","objectID":"/posts/arduino%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E6%9D%BF/:0:0","tags":["esp32"],"title":"Arduino手动安装开发板","uri":"/posts/arduino%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E6%9D%BF/"},{"categories":["开发"],"content":"Git log 让log显示成一行 git log --pretty=oneline 格式化log git log --pretty=format:\"%h - %an, %ar : %s\" ","date":"2025-01-23","objectID":"/posts/git/:1:0","tags":["git","开发"],"title":"Git","uri":"/posts/git/"},{"categories":["开发"],"content":"分支管理 Git新建分支 新建分支： git checkout -b my-new-branch 删除分支： git branch -d my-new-branch 新建分支也可以简写成： git branch my-new-branch git checkout my-new-branch Git删除分支 显示所有分支 git branch -a 删除本地分支 git branch -d branch-name 删除远程分支： git push origin -d remote-branch-name 分支改名 git branch -m new-name ","date":"2025-01-23","objectID":"/posts/git/:2:0","tags":["git","开发"],"title":"Git","uri":"/posts/git/"},{"categories":["开发"],"content":"Git stash 临时保存 比如Dev分支，活干一半的时候，需要临时开一个Bugfix分支来修补bug //缓存当前编辑 git stash git stash save 'for name' // 显示缓存列表 git stash list // 删除编号为3的缓存 git stash drop -q stash@{3} // 删除所有缓存 git stash clear // 弹出最新缓存 git stash pop //然后再将缓存POP出来(最近的一个) git stash pop # 恢复指定编号的 WIP，同时从列表中移除 git stash pop stash@{num} # 恢复指定编号的 WIP，但不从列表中移除 git stash apply stash@{num} 误删之后怎么恢复 如果不小心执行了： git stash clear 把缓存的全部清除了，那么可以使用如下命令，找出历史缓存 git log --oneline --decorate $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' ) 然后会看到很多历史ID，执行 git stash apply XXXX ","date":"2025-01-23","objectID":"/posts/git/:3:0","tags":["git","开发"],"title":"Git","uri":"/posts/git/"},{"categories":["开发"],"content":"Git patch 打补丁 正常打patch // 将更改打包成patch git diff \u003e test.patch // 检查patch的情况 git apply --stat test.patch 会有如下输出： src/tuner-filters.c | 4 ++-- src/tuner.h | 5 ++++- src/ui-input.c | 21 +++++++++++++++++++-- src/ui-tuner-update.c | 20 +++++++++++++++++++- src/ui.c | 21 +++++++++++++++++++-- 5 files changed, 63 insertions(+), 8 deletions(-) // 然后应用patch git apply test.patch // 最后检查结果： git apply --check test.patch // 如果没有任何输出，证明打patch成功 ","date":"2025-01-23","objectID":"/posts/git/:4:0","tags":["git","开发"],"title":"Git","uri":"/posts/git/"},{"categories":["wolf"],"content":"LCD驱动映射的具体实现 // lcd_driver.h typedef struct { // 基础操作函数指针 void (*init)(void); void (*reset)(void); void (*writeCmd)(uint8_t cmd); void (*writeData)(uint8_t data); uint8_t (*readData)(void); // 显示控制函数指针 void (*setRotation)(uint8_t r); void (*setWindow)(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2); void (*setBrightness)(uint8_t percent); // 绘图函数指针 void (*drawPixel)(uint16_t x, uint16_t y, uint16_t color); void (*fillRect)(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color); void (*drawBitmap)(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h); // RA8875特有功能函数指针 void (*bte_copyArea)(uint16_t sx, uint16_t sy, uint16_t dx, uint16_t dy, uint16_t w, uint16_t h, bool fromEnd); } LCD_Driver_Ops; // RA8875驱动实现 static const LCD_Driver_Ops ra8875_ops = { .init = RA8875_Init, .reset = RA8875_Reset, .writeCmd = RA8875_WriteCmd, .writeData = RA8875_WriteData, .readData = RA8875_ReadData, .setRotation = RA8875_SetRotation, .setWindow = RA8875_SetWindow, .setBrightness = RA8875_SetBrightness, .drawPixel = RA8875_DrawPixel, .fillRect = RA8875_FillRect, .drawBitmap = RA8875_DrawBitmap, .bte_copyArea = RA8875_BTE_CopyArea }; // 全局驱动操作指针 static LCD_Driver_Ops *current_lcd_ops = NULL; // 驱动初始化 void LCD_Driver_Init(void) { // 根据硬件配置选择驱动 #if defined(LCD_RA8875) current_lcd_ops = \u0026ra8875_ops; #elif defined(LCD_ILI9341) current_lcd_ops = \u0026ili9341_ops; #elif defined(LCD_ST7789) current_lcd_ops = \u0026st7789_ops; #endif // 调用具体驱动的初始化 if(current_lcd_ops \u0026\u0026 current_lcd_ops-\u003einit) { current_lcd_ops-\u003einit(); } } // 统一的接口函数 void LCD_WriteCmd(uint8_t cmd) { if(current_lcd_ops \u0026\u0026 current_lcd_ops-\u003ewriteCmd) { current_lcd_ops-\u003ewriteCmd(cmd); } } void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) { if(current_lcd_ops \u0026\u0026 current_lcd_ops-\u003edrawPixel) { current_lcd_ops-\u003edrawPixel(x, y, color); } } ","date":"2025-01-23","objectID":"/posts/lcd%E9%A9%B1%E5%8A%A8%E6%98%A0%E5%B0%84/:0:1","tags":["wolf","开发"],"title":"LCD驱动映射","uri":"/posts/lcd%E9%A9%B1%E5%8A%A8%E6%98%A0%E5%B0%84/"},{"categories":["wolf"],"content":"映射过程： 1. 编译时选择: #if defined(LCD_RA8875) current_lcd_ops = \u0026ra8875_ops; #endif 2. 函数调用映射: // 调用示例 void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) { // current_lcd_ops-\u003edrawPixel 实际指向 RA8875_DrawPixel current_lcd_ops-\u003edrawPixel(x, y, color); } 3. 具体实现: // RA8875具体实现 static void RA8875_DrawPixel(uint16_t x, uint16_t y, uint16_t color) { RA8875_SetCursor(x, y); RA8875_WriteReg(0x02, color \u003e\u003e 8); // 颜色高字节 RA8875_WriteReg(0x03, color \u0026 0xFF); // 颜色低字节 } 这种设计的优点: 零额外开销：函数指针在编译时确定 类型安全：结构体定义保证函数签名匹配 接口统一：上层代码使用统一接口 易于扩展：添加新驱动只需实现ops结构体 功能灵活：可以根据硬件特性添加专有功能 ","date":"2025-01-23","objectID":"/posts/lcd%E9%A9%B1%E5%8A%A8%E6%98%A0%E5%B0%84/:0:2","tags":["wolf","开发"],"title":"LCD驱动映射","uri":"/posts/lcd%E9%A9%B1%E5%8A%A8%E6%98%A0%E5%B0%84/"},{"categories":["wolf"],"content":"RA8875内置了GT字库支持，可以直接显示中文。 字库特性 GT21L16S2W / GT21L16T2W 字库支持: 1. GB2312: 6763个汉字 2. ASCII: 95个字符 3. 字体大小: 16x16, 24x24, 32x32 参考 → RA8875显示小字库 graph TB A[RA8875中文显示] --\u003e B[字库配置] A --\u003e C[显示函数] A --\u003e D[字符集] B --\u003e B1[内置GT字库] B --\u003e B2[外置字库] C --\u003e C1[文本模式] C --\u003e C2[图形模式] D --\u003e D1[GB2312] D --\u003e D2[BIG5] graph TB A[RA8875中文显示] --\u003e B[字库配置] A --\u003e C[显示函数] A --\u003e D[字符集] B --\u003e B1[内置GT字库] B --\u003e B2[外置字库] C --\u003e C1[文本模式] C --\u003e C2[图形模式] D --\u003e D1[GB2312] D --\u003e D2[BIG5] 1. RA8875字库初始化 // RA8875字库初始化 void RA8875_FontInit(void) { // 选择内部CGROM RA8875_WriteReg(0x21, 0x00); // 设置字体编码方式为GB2312 RA8875_WriteReg(0x22, 0x00); // 设置文本模式 RA8875_WriteReg(0x40, 0x00); } 2. 文本显示函数 // 显示中文字符串 void RA8875_ShowChinese(uint16_t x, uint16_t y, const char *str) { // 设置文本写入位置 RA8875_SetTextCursor(x, y); // 设置文本颜色 RA8875_SetTextColor(FG_COLOR); // 发送字符串 while(*str) { RA8875_WriteData(*str++); } } // 设置字体大小 void RA8875_SetFontSize(uint8_t size) { // size: 0=16x16, 1=24x24, 2=32x32 uint8_t cmd = 0x02; // 默认16x16 switch(size) { case 1: cmd = 0x03; break; // 24x24 case 2: cmd = 0x04; break; // 32x32 } RA8875_WriteReg(0x22, cmd); } 4. 使用示例 void LCD_ShowChineseMenu(void) { RA8875_FontConfig config = { .size = 1, // 24x24大小 .spacing = 0, // 默认间距 .encoding = 0, // GB2312编码 .color = COLOR_WHITE, .bgColor = COLOR_BLACK }; // 配置字体 RA8875_ConfigFont(\u0026config); // 显示菜单项 RA8875_ShowChinese(10, 10, \"系统设置\"); RA8875_ShowChinese(10, 40, \"频率设置\"); RA8875_ShowChinese(10, 70, \"显示设置\"); } 5. 性能优化 // 使用DMA加速显示 void RA8875_ShowChineseDMA(uint16_t x, uint16_t y, const char *str, uint16_t len) { // 设置文本位置 RA8875_SetTextCursor(x, y); // 启动DMA传输 HAL_DMA_Start_IT(\u0026hdma_memtomem, (uint32_t)str, RA8875_DATA_ADDR, len ); } ","date":"2025-01-23","objectID":"/posts/ra8875%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/:0:1","tags":["wolf","开发"],"title":"RA8875显示中文","uri":"/posts/ra8875%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/"},{"categories":["wolf"],"content":" 高度可配置：支持多种分辨率和主题 维护性好：布局参数集中管理 扩展性强：易于添加新的布局主题 编译时优化：使用常量表达式提高性能 结构清晰：布局参数分类组织 ","date":"2025-01-23","objectID":"/posts/layout/:0:0","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"Layout 布局框架图 graph LR A[screen_layout.h] --\u003e B1[160x128布局] A --\u003e B2[320x240布局] A --\u003e B3[480x320布局] A --\u003e B4[800x480布局] subgraph 布局定义 C1[按钮布局] C2[频率显示布局] C3[状态栏布局] C4[菜单布局] C5[FFT显示布局] end subgraph 主题系统 D1[颜色主题] D2[字体配置] D3[间距配置] D4[组件尺寸] end B1 --\u003e C1 B1 --\u003e C2 B1 --\u003e C3 B2 --\u003e C1 B2 --\u003e C2 B2 --\u003e C3 B3 --\u003e C1 B3 --\u003e C2 B3 --\u003e C3 B4 --\u003e C1 B4 --\u003e C2 B4 --\u003e C3 C1 --\u003e D1 C1 --\u003e D2 C1 --\u003e D3 C1 --\u003e D4 graph LR A[screen_layout.h] --\u003e B1[160x128布局] A --\u003e B2[320x240布局] A --\u003e B3[480x320布局] A --\u003e B4[800x480布局] subgraph 布局定义 C1[按钮布局] C2[频率显示布局] C3[状态栏布局] C4[菜单布局] C5[FFT显示布局] end subgraph 主题系统 D1[颜色主题] D2[字体配置] D3[间距配置] D4[组件尺寸] end B1 --\u003e C1 B1 --\u003e C2 B1 --\u003e C3 B2 --\u003e C1 B2 --\u003e C2 B2 --\u003e C3 B3 --\u003e C1 B3 --\u003e C2 B3 --\u003e C3 B4 --\u003e C1 B4 --\u003e C2 B4 --\u003e C3 C1 --\u003e D1 C1 --\u003e D2 C1 --\u003e D3 C1 --\u003e D4 graph LR A[LCD界面结构] --\u003e B[顶部区域] A --\u003e C[中部区域] A --\u003e D[底部区域] A --\u003e E[弹出窗口] subgraph 顶部区域 B --\u003e B1[状态栏] B1 --- B11[时钟] B1 --- B12[WiFi状态] B1 --- B13[SD卡状态] B --\u003e B2[功能按钮] B2 --- B21[PRE/ATT] B2 --- B22[AGC/NB] B2 --- B23[模式选择] end subgraph 中部区域 C --\u003e C1[频率显示] C1 --- C11[VFO-A] C1 --- C12[VFO-B] C --\u003e C2[频谱显示] C2 --- C21[FFT频谱] C2 --- C22[瀑布图] C --\u003e C3[状态指示] C3 --- C31[S表] C3 --- C32[功率/SWR] end subgraph 底部区域 D --\u003e D1[功能按钮] D1 --- D11[频率步进] D1 --- D12[功能切换] D1 --- D13[菜单访问] end subgraph 弹出窗口 E --\u003e E1[系统菜单] E --\u003e E2[键盘输入] E --\u003e E3[提示信息] E --\u003e E4[错误警告] end graph LR A[LCD界面结构] --\u003e B[顶部区域] A --\u003e C[中部区域] A --\u003e D[底部区域] A --\u003e E[弹出窗口] subgraph 顶部区域 B --\u003e B1[状态栏] B1 --- B11[时钟] B1 --- B12[WiFi状态] B1 --- B13[SD卡状态] B --\u003e B2[功能按钮] B2 --- B21[PRE/ATT] B2 --- B22[AGC/NB] B2 --- B23[模式选择] end subgraph 中部区域 C --\u003e C1[频率显示] C1 --- C11[VFO-A] C1 --- C12[VFO-B] C --\u003e C2[频谱显示] C2 --- C21[FFT频谱] C2 --- C22[瀑布图] C --\u003e C3[状态指示] C3 --- C31[S表] C3 --- C32[功率/SWR] end subgraph 底部区域 D --\u003e D1[功能按钮] D1 --- D11[频率步进] D1 --- D12[功能切换] D1 --- D13[菜单访问] end subgraph 弹出窗口 E --\u003e E1[系统菜单] E --\u003e E2[键盘输入] E --\u003e E3[提示信息] E --\u003e E4[错误警告] end ","date":"2025-01-23","objectID":"/posts/layout/:0:1","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"布局结构定义 // screen_layout.h typedef const struct { // 顶部按钮布局 const uint16_t TOPBUTTONS_X1; const uint16_t TOPBUTTONS_Y1; const uint16_t TOPBUTTONS_WIDTH; const uint16_t TOPBUTTONS_HEIGHT; // 频率显示区域 const uint16_t FREQ_X_OFFSET_100; const uint16_t FREQ_Y_BASELINE; const uint16_t FREQ_HEIGHT; // 状态显示区域 const uint16_t STATUS_BAR_X_OFFSET; const uint16_t STATUS_BAR_HEIGHT; // FFT和瀑布图区域 const uint16_t FFT_HEIGHT_STYLE1; const uint16_t WTF_HEIGHT_STYLE1; // 字体配置 const GFXfont *FREQ_FONT; const GFXfont *STATUS_TXRX_FONT; } STRUCT_LAYOUT_THEME; ","date":"2025-01-23","objectID":"/posts/layout/:0:2","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"分辨率适配 // screen_layout_800x480.cpp extern \"C\" constexpr STRUCT_LAYOUT_THEME LAYOUT_THEMES[LAYOUT_THEMES_COUNT] = { // Default theme { .TOPBUTTONS_X1 = 0, .TOPBUTTONS_X2 = (LCD_WIDTH - 1), .TOPBUTTONS_Y1 = 95, .TOPBUTTONS_COUNT = 11, .TOPBUTTONS_WIDTH = (float32_t)((float32_t)LCD_WIDTH / 11), .TOPBUTTONS_HEIGHT = 50, .FREQ_HEIGHT = 51, .FREQ_WIDTH = 370, .FREQ_FONT = \u0026FreeSans36pt7b, // ... 其他布局参数 }, // 其他主题 }; ","date":"2025-01-23","objectID":"/posts/layout/:0:3","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"布局使用 // lcd.c STRUCT_LAYOUT_THEME *LAYOUT = \u0026LAYOUT_THEMES[TRX.LayoutThemeId]; void LCD_displayTopButtons(bool redraw) { uint16_t x = LAYOUT-\u003eTOPBUTTONS_X1; uint16_t y = LAYOUT-\u003eTOPBUTTONS_Y1; uint16_t width = LAYOUT-\u003eTOPBUTTONS_WIDTH; uint16_t height = LAYOUT-\u003eTOPBUTTONS_HEIGHT; // 使用布局参数绘制按钮 printButton(x, y, width, height, ...); } ","date":"2025-01-23","objectID":"/posts/layout/:0:4","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"布局计算 // 相对位置计算 .FREQ_Y_BASELINE = (uint16_t)(LAYOUT_THEMES[0].FREQ_Y_TOP + LAYOUT_THEMES[0].FREQ_HEIGHT + LAYOUT_THEMES[0].FREQ_TOP_OFFSET), // 自适应宽度 .TOPBUTTONS_WIDTH = (float32_t)((float32_t)LCD_WIDTH / (float32_t)LAYOUT_THEMES[0].TOPBUTTONS_COUNT), ","date":"2025-01-23","objectID":"/posts/layout/:0:5","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"主题切换 void LCD_Init(void) { // 选择布局主题 LAYOUT = \u0026LAYOUT_THEMES[TRX.LayoutThemeId]; // 选择颜色主题 COLOR = \u0026COLOR_THEMES[TRX.ColorThemeId]; // 应用布局 LCD_redraw(true); } ","date":"2025-01-23","objectID":"/posts/layout/:0:6","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"布局验证 #if (LCD_WIDTH == 800 \u0026\u0026 LCD_HEIGHT == 480) #define LAYOUT_THEMES_COUNT 8 #define MAX_FFT_HEIGHT 275 #define MAX_WTF_HEIGHT 195 #endif ","date":"2025-01-23","objectID":"/posts/layout/:0:7","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"布局特色 常量布局：使用constexpr确保编译时计算 主题化：支持多个布局主题 分辨率适配：不同分辨率使用不同布局文件 相对定位：使用相对位置计算避免硬编码 模块化：按功能区域划分布局参数 ","date":"2025-01-23","objectID":"/posts/layout/:0:8","tags":["wolf","开发"],"title":"布局Layout","uri":"/posts/layout/"},{"categories":["wolf"],"content":"字体引用框架图 graph LR A[FreeSans字体系统] --\u003e B[频率显示字体] A --\u003e C[界面字体] A --\u003e D[状态字体] A --\u003e E[提示字体] B --\u003e B1[FreeSans36pt7b] B1 --- B11[主频率显示] B1 --- B12[VFO-A/B频率] B1 --- B13[频率输入] C --\u003e C1[FreeSans9pt7b] C1 --- C11[顶部按钮 PRE/ATT/AGC/模式选择] C1 --- C12[系统菜单 标题/选项/设置] C1 --- C13[底部按钮 步进/功能/快捷键] D --\u003e D1[FreeSans7pt7b] D1 --- D11[S表 信号强度/刻度] D1 --- D12[发射信息 功率/SWR/ALC] D1 --- D13[状态栏 时钟/温度/电压] E --\u003e E1[FreeSans12pt7b] E1 --- E11[工具提示 按钮/功能说明] E1 --- E12[系统信息 错误/警告/提醒] classDef default fill:#f9f,stroke:#333,stroke-width:2px; classDef freq fill:#bbf,stroke:#333,stroke-width:2px; classDef ui fill:#bfb,stroke:#333,stroke-width:2px; classDef status fill:#fbf,stroke:#333,stroke-width:2px; classDef tooltip fill:#ffb,stroke:#333,stroke-width:2px; class B1 freq; class C1 ui; class D1 status; class E1 tooltip; graph LR A[FreeSans字体系统] --\u003e B[频率显示字体] A --\u003e C[界面字体] A --\u003e D[状态字体] A --\u003e E[提示字体] B --\u003e B1[FreeSans36pt7b] B1 --- B11[主频率显示] B1 --- B12[VFO-A/B频率] B1 --- B13[频率输入] C --\u003e C1[FreeSans9pt7b] C1 --- C11[顶部按钮 PRE/ATT/AGC/模式选择] C1 --- C12[系统菜单 标题/选项/设置] C1 --- C13[底部按钮 步进/功能/快捷键] D --\u003e D1[FreeSans7pt7b] D1 --- D11[S表 信号强度/刻度] D1 --- D12[发射信息 功率/SWR/ALC] D1 --- D13[状态栏 时钟/温度/电压] E --\u003e E1[FreeSans12pt7b] E1 --- E11[工具提示 按钮/功能说明] E1 --- E12[系统信息 错误/警告/提醒] classDef default fill:#f9f,stroke:#333,stroke-width:2px; classDef freq fill:#bbf,stroke:#333,stroke-width:2px; classDef ui fill:#bfb,stroke:#333,stroke-width:2px; classDef status fill:#fbf,stroke:#333,stroke-width:2px; classDef tooltip fill:#ffb,stroke:#333,stroke-width:2px; class B1 freq; class C1 ui; class D1 status; class E1 tooltip; ","date":"2025-01-23","objectID":"/posts/font/:0:1","tags":["wolf","开发"],"title":"字体","uri":"/posts/font/"}]